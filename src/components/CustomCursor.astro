---
// CustomCursor.astro
---

<!-- Cursor personalizado con estilo Ferxxo -->
<div id="custom-cursor" class="custom-cursor hidden md:block"></div>
<div
  id="cursor-particles"
  class="fixed top-0 left-0 w-full h-full pointer-events-none z-40"
>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Elementos del cursor
    const customCursor = document.getElementById(
      "custom-cursor"
    ) as HTMLElement;
    const cursorParticles = document.getElementById(
      "cursor-particles"
    ) as HTMLElement;

    if (!customCursor || !cursorParticles) return;

    // Variables para el seguimiento del cursor
    let mouseX = 0;
    let mouseY = 0;
    let cursorX = 0;
    let cursorY = 0;
    let isHoveringLink = false;
    let particles: Particle[] = [];

    class Particle {
      x: number;
      y: number;
      size: number;
      speedX: number;
      speedY: number;
      color: string;
      alpha: number;
      element: HTMLDivElement;

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 5 + 1;
        this.speedX = Math.random() * 2 - 1;
        this.speedY = Math.random() * 2 - 1;

        // Colores neón Ferxxo
        const colors = ["#FF2D9E", "#00F0FF", "#A020F0", "#00FF7F"];
        this.color = colors[Math.floor(Math.random() * colors.length)];

        this.alpha = 1;

        // Crear elemento visual de la partícula
        this.element = document.createElement("div");
        this.element.style.position = "absolute";
        this.element.style.width = `${this.size}px`;
        this.element.style.height = `${this.size}px`;
        this.element.style.backgroundColor = this.color;
        this.element.style.borderRadius = "50%";
        this.element.style.filter = "blur(1px)";
        this.element.style.opacity = "1";
        this.element.style.transition = "opacity 300ms ease";
        this.element.style.boxShadow = `0 0 8px ${this.color}`;

        // Añadir al contenedor
        cursorParticles.appendChild(this.element);
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        this.alpha -= 0.01;

        this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;
        this.element.style.opacity = `${this.alpha}`;
      }

      remove() {
        this.element.remove();
      }
    }

    // Inicializar cursor
    const initCursor = () => {
      document.addEventListener("mousemove", (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;

        // Crear partículas ocasionalmente
        if (Math.random() < 0.1 && isHoveringLink) {
          createParticle(mouseX, mouseY);
        }
      });

      // Rastro adicional para efecto de velocidad
      let prevX = 0;
      let prevY = 0;
      let moveSpeed = 0;

      document.addEventListener("mousemove", (e) => {
        // Calcular velocidad del movimiento
        moveSpeed = Math.sqrt(
          Math.pow(e.clientX - prevX, 2) + Math.pow(e.clientY - prevY, 2)
        );

        // Crear estela al mover rápido
        if (moveSpeed > 10) {
          for (let i = 0; i < 3; i++) {
            setTimeout(() => {
              createParticle(
                mouseX - (mouseX - prevX) * (i / 3),
                mouseY - (mouseY - prevY) * (i / 3)
              );
            }, i * 50);
          }
        }

        prevX = e.clientX;
        prevY = e.clientY;
      });

      // Detectar si estamos sobre un enlace o botón
      document.querySelectorAll("a, button").forEach((el) => {
        el.addEventListener("mouseenter", () => {
          isHoveringLink = true;
          customCursor.classList.add("scale-150");
          customCursor.classList.add("border-ferxxo-pink");
          customCursor.classList.remove("border-ferxxo-green");
        });

        el.addEventListener("mouseleave", () => {
          isHoveringLink = false;
          customCursor.classList.remove("scale-150");
          customCursor.classList.remove("border-ferxxo-pink");
          customCursor.classList.add("border-ferxxo-green");
        });
      });

      // Actualizar la posición del cursor personalizado
      const updateCursor = () => {
        // Interpolación suave para movimiento fluido
        const ease = 0.2;
        cursorX += (mouseX - cursorX) * ease;
        cursorY += (mouseY - cursorY) * ease;

        customCursor.style.left = `${mouseX}px`;
        customCursor.style.top = `${mouseY}px`;

        // Añadir efecto de rotación basado en la velocidad
        if (moveSpeed > 5) {
          const rotation =
            Math.atan2(mouseY - cursorY, mouseX - cursorX) * (180 / Math.PI);
          customCursor.style.transform = `rotate(${rotation}deg) scale(${1 + moveSpeed * 0.01})`;
        } else {
          customCursor.style.transform = "";
        }

        // Actualizar partículas
        particles.forEach((particle, index) => {
          particle.update();

          // Eliminar partículas desvanecidas
          if (particle.alpha <= 0) {
            particle.remove();
            particles.splice(index, 1);
          }
        });

        requestAnimationFrame(updateCursor);
      };

      updateCursor();
    };

    // Crear una nueva partícula
    const createParticle = (x: number, y: number) => {
      particles.push(new Particle(x, y));

      // Limitar número de partículas para rendimiento
      if (particles.length > 30) {
        particles[0].remove();
        particles.shift();
      }
    };

    // Iniciar el cursor personalizado
    initCursor();
  });
</script>

<style>
  .custom-cursor {
    position: fixed;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid var(--ferxxo-green);
    box-shadow: 0 0 10px rgba(0, 255, 127, 0.5);
    transform-origin: center;
    transition: all 0.15s ease;
    z-index: 9999;
    pointer-events: none;
    transform: translate(-50%, -50%);
    mix-blend-mode: exclusion;
  }

  .custom-cursor::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 4px;
    height: 4px;
    background-color: white;
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }

  .custom-cursor.border-ferxxo-pink {
    border-color: var(--ferxxo-pink);
    box-shadow: 0 0 15px rgba(255, 45, 158, 0.7);
  }
</style>
